<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <PropertyGroup>
    <PackageOutputPath>./nupkg</PackageOutputPath>
    <Description>Roslyn Code Refactoring, which provides sync to async method conversion with propagation across method call-chain and inheritance chain.
      Also supports reverse async to sync conversion
    </Description>
    <PackageId>AsyncPropagationRefactoring</PackageId>
    <PackageProjectUrl>https://github.com/gbtb/AsyncPropagationRefactoring</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryUrl>https://github.com/gbtb/AsyncPropagationRefactoring</RepositoryUrl>
    <Copyright>Copyright (c) gbtb 2021</Copyright>
    <RepositoryType>git</RepositoryType>
    <Version>0.2.4</Version>
    <Authors>gbtb</Authors>
    <PackageTags>roslyn refactoring async await omnisharp vs</PackageTags>
    <DevelopmentDependency>true</DevelopmentDependency>
    <NoPackageAnalysis>true</NoPackageAnalysis>

    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_AddAnalyzersToOutput</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\AsyncPropagation.Refactoring\AsyncPropagation.Refactoring.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Update="tools\*.ps1" CopyToOutputDirectory="Always" Pack="true" PackagePath="" />
  </ItemGroup>

  <Target Name="_AddAnalyzersToOutput">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(OutputPath)\AsyncPropagation.Refactoring.dll" PackagePath="analyzers/dotnet/cs" />
    </ItemGroup>
  </Target>

</Project>
